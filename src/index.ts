import { app, BrowserWindow, Tray, nativeImage, Menu } from 'electron';
import electronIsDev from 'electron-is-dev';
import windowStateKeeper from 'electron-window-state';
import path from 'path';

import { bindIPC } from './ipc';
import { getFileFromPublic } from './getFileFromPublic';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

export let mainWindow: BrowserWindow | null;
export const trays: Tray[] = [];

const loadApp = (): void => {
  createMainWindow();
  bindIPC();
};

const setupThumbnailButton = (window: BrowserWindow): void => {
  try {
    // Get the tray icon path
    const iconPath = getFileFromPublic("IconTemplate@2x.png");

    // Create a native image from the icon file
    const icon = nativeImage.createFromPath(iconPath);

    // Resize to 44x44 for thumbnail button (Windows standard)
    const thumbnailIcon = icon.resize({ width: 16, height: 16 });

    // Set thumbnail clip area for custom thumbnail preview
    // window.setThumbnailClip({ x: 0, y: 0, width: 44, height: 44 });

    // // Set the window icon (this affects the taskbar thumbnail)
    // window.setIcon(thumbnailIcon);

    // Set up thumbnail toolbar buttons (Windows 7+)
    window.setThumbarButtons([
      {
        tooltip: 'Add Tray Icon',
        icon: thumbnailIcon,
        click: () => {
          // Add a new tray icon directly
          const newTray = new Tray(getFileFromPublic("IconTemplate@2x.png"));
          newTray.setContextMenu(
            Menu.buildFromTemplate([
              {
                label: "Show application",
                click() {
                  window.show();
                }
              },
              {
                label: "Exit application",
                click() {
                  app.exit();
                }
              }
            ])
          );
          trays.push(newTray);
        }
      },
      {
        tooltip: 'Remove Tray Icon',
        icon: thumbnailIcon,
        click: () => {
          // Remove the last tray icon directly
          const lastTray = trays.pop();
          if (lastTray) {
            lastTray.destroy();
          }
        }
      }
    ]);

    console.log('Thumbnail button set up successfully');
  } catch (error) {
    console.error('Failed to set up thumbnail button:', error);
  }
};

const createMainWindow = (): void => {
  const windowState = windowStateKeeper({
    fullScreen: false
  });

  // Create the browser window.
  mainWindow = new BrowserWindow({
    ...windowState,
    height: 300,
    width: 600,
    center: true,
    resizable: false,
    fullscreenable: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      nodeIntegration: true,
      devTools: true
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools in development
  if (electronIsDev) {
    mainWindow.webContents.openDevTools();
  }

  // Set up thumbnail button for Windows taskbar (appears when hovering over taskbar icon)
  if (process.platform === 'win32') {
    setupThumbnailButton(mainWindow);
  }

  mainWindow.on("close", () => mainWindow = null);

  windowState.manage(mainWindow);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', loadApp);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createMainWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
